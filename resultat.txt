Chemin : src/main/resources/application.properties
Titre : application.properties
Contenu :
spring.application.name=exo1
server.port=8081

## Database
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=louis
spring.datasource.password=password
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

## Update Schema
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

    
## Swagger
spring.mvc.pathmatch.matching-strategy=ant_path_matcher


#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

## Debug query

#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true

# Recommended logging configuration
#spring.jpa.properties.hibernate.generate_statistics=true
#
#logging.level.root=INFO
#logging.level.org.hibernate.stat=DEBUG
#logging.level.org.hibernate.SQL=DEBUG
## Cache
----------------------------------
Chemin : src/main/java/com/exo1/exo1/mapper/ProductMapper.java
Titre : ProductMapper.java
Contenu :
package com.exo1.exo1.mapper;

import com.exo1.exo1.dto.ProductDTO;
import com.exo1.exo1.entity.Product;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

@Mapper(componentModel = "spring")
public interface ProductMapper {
    ProductMapper INSTANCE = Mappers.getMapper(ProductMapper.class);

    ProductDTO toDTO(Product product);
    Product toEntity(ProductDTO productDTO);
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/mapper/TacheMapper.java
Titre : TacheMapper.java
Contenu :
package com.exo1.exo1.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

import com.exo1.exo1.dto.TacheDTO;
import com.exo1.exo1.entity.OrderItem;

@Mapper(componentModel = "spring")
public interface TacheMapper {
    TacheDTO toDTO(OrderItem orderItem);
    OrderItem toEntity(TacheDTO tacheDTO);
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/mapper/OrderItemMapper.java
Titre : OrderItemMapper.java
Contenu :
package com.exo1.exo1.mapper;

import com.exo1.exo1.dto.OrderItemDTO;
import com.exo1.exo1.entity.OrderItem;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

@Mapper(componentModel = "spring")
public interface OrderItemMapper {
    OrderItemMapper INSTANCE = Mappers.getMapper(OrderItemMapper.class);

    OrderItemDTO toDTO(OrderItem orderItem);
    OrderItem toEntity(OrderItemDTO orderItemDTO);
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/mapper/ProjetMapper.java
Titre : ProjetMapper.java
Contenu :
package com.exo1.exo1.mapper;

import com.exo1.exo1.dto.ProjetDTO;
import com.exo1.exo1.entity.Product;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

@Mapper(componentModel = "spring")
public interface ProjetMapper {
    ProjetMapper INSTANCE = Mappers.getMapper(ProjetMapper.class);

    ProjetDTO toDTO(Product product);
    Product toEntity(ProjetDTO projetDTO);
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/mapper/UserMapper.java
Titre : UserMapper.java
Contenu :
package com.exo1.exo1.mapper;

import com.exo1.exo1.dto.UserDTO;
import com.exo1.exo1.entity.User;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

@Mapper(componentModel = "spring")
public interface UserMapper {
    UserMapper INSTANCE = Mappers.getMapper(UserMapper.class);

    UserDTO userToUserDTO(User user);
    User userDTOToUser(UserDTO userDTO);
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/SwaggerConfig.java
Titre : SwaggerConfig.java
Contenu :
package com.exo1.exo1;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;

@Configuration
public class SwaggerConfig {

    @Bean
    public Docket api() {
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                .apis(RequestHandlerSelectors.basePackage("com.exo1.exo1"))
                .paths(PathSelectors.any())
                .build();
    }
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/Exo1Application.java
Titre : Exo1Application.java
Contenu :
package com.exo1.exo1;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Exo1Application {

	public static void main(String[] args) {
		SpringApplication.run(Exo1Application.class, args);
	}

}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/entity/Order.java
Titre : Order.java
Contenu :
package com.exo1.exo1.entity;

import jakarta.persistence.*;
import java.util.Date;
import java.util.List;

@Entity
@Table(name = "orders")
public class Order {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<OrderItem> orderItems;

    @Column(nullable = false)
    private Date orderDate;

    // Getters et Setters
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/entity/Product.java
Titre : Product.java
Contenu :
package com.exo1.exo1.entity;

import jakarta.persistence.*;
import java.math.BigDecimal;

@Entity
@Table(name = "products")
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    @Column(nullable = false)
    private BigDecimal price;

    // Getters et Setters
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public BigDecimal getPrice() {
        return price;
    }
    public void setPrice(BigDecimal price) {
        this.price = price;
    }
    public BigDecimal getTotal() {
        return price;
    }
    public void setTotal(BigDecimal total) {
        this.price = total;
    }

}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/entity/User.java
Titre : User.java
Contenu :
package com.exo1.exo1.entity;

import jakarta.persistence.*;
import java.util.List;

@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Order> orders;

    // Getters et Setters
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public List<Order> getOrders() {
        return orders;
    }
    public void setOrders(List<Order> orders) {
        this.orders = orders;
    }
    
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/entity/OrderItem.java
Titre : OrderItem.java
Contenu :
package com.exo1.exo1.entity;

import jakarta.persistence.*;
import java.math.BigDecimal;

@Entity
@Table(name = "order_items")
public class OrderItem {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "order_id", nullable = false)
    private Order order;

    @ManyToOne
    @JoinColumn(name = "product_id", nullable = false)
    private Product product;

    @Column(nullable = false)
    private Integer quantity;

    @Column(nullable = false)
    private BigDecimal price;

    // Getters et Setters
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public Order getOrder() {
        return order;
    }
    public void setOrder(Order order) {
        this.order = order;
    }
    public Product getProduct() {
        return product;
    }
    public void setProduct(Product product) {
        this.product = product;
    }
    public Integer getQuantity() {
        return quantity;
    }
    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
    }
    public BigDecimal getPrice() {
        return price;
    }
    public void setPrice(BigDecimal price) {
        this.price = price;
    }
    public BigDecimal getTotal() {
        return price.multiply(BigDecimal.valueOf(quantity));
    }
    public void setTotal(BigDecimal total) {
        this.price = total.divide(BigDecimal.valueOf(quantity));
    }
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/repository/OrderRepository.java
Titre : OrderRepository.java
Contenu :
package com.exo1.exo1.repository;

import com.exo1.exo1.entity.Order;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface OrderRepository extends JpaRepository<Order, Long> {
    // Ajoutez des méthodes personnalisées ici si nécessaire, par exemple :
    // List<Order> findByUserId(Long userId);
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/repository/UserRepository.java
Titre : UserRepository.java
Contenu :
package com.exo1.exo1.repository;

import com.exo1.exo1.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    // Ajoutez des méthodes personnalisées ici si nécessaire, par exemple :
    // Optional<User> findByEmail(String email);
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/repository/OrderItemRepository.java
Titre : OrderItemRepository.java
Contenu :
package com.exo1.exo1.repository;

import com.exo1.exo1.entity.OrderItem;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface OrderItemRepository extends JpaRepository<OrderItem, Long> {
    // Ajoutez des méthodes personnalisées ici si nécessaire, par exemple :
    // List<OrderItem> findByOrderId(Long orderId);
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/repository/ProductRepository.java
Titre : ProductRepository.java
Contenu :
package com.exo1.exo1.repository;

import com.exo1.exo1.entity.Product;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ProductRepository extends JpaRepository<Product, Long> {
    // Ajoutez des méthodes personnalisées ici si nécessaire, par exemple :
    // List<Product> findByCategory(String category);
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/service/OrderItemService.java
Titre : OrderItemService.java
Contenu :
package com.exo1.exo1.service;

import com.exo1.exo1.entity.OrderItem;
import com.exo1.exo1.repository.OrderItemRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class OrderItemService {

    private final OrderItemRepository orderItemRepository;

    @Autowired
    public OrderItemService(OrderItemRepository orderItemRepository) {
        this.orderItemRepository = orderItemRepository;
    }

    public List<OrderItem> findAll() {
        return orderItemRepository.findAll();
    }

    public Optional<OrderItem> findById(Long id) {
        return orderItemRepository.findById(id);
    }

    public OrderItem save(OrderItem orderItem) {
        return orderItemRepository.save(orderItem);
    }

    public void deleteById(Long id) {
        orderItemRepository.deleteById(id);
    }
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/service/UserService.java
Titre : UserService.java
Contenu :
package com.exo1.exo1.service;

import com.exo1.exo1.entity.User;
import com.exo1.exo1.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class UserService {

    private final UserRepository userRepository;

    @Autowired
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public List<User> findAll() {
        return userRepository.findAll();
    }

    public Optional<User> findById(Long id) {
        return userRepository.findById(id);
    }

    public User save(User user) {
        return userRepository.save(user);
    }

    public void deleteById(Long id) {
        userRepository.deleteById(id);
    }
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/service/ProductService.java
Titre : ProductService.java
Contenu :
package com.exo1.exo1.service;

import com.exo1.exo1.entity.Product;
import com.exo1.exo1.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ProductService {

    private final ProductRepository productRepository;

    @Autowired
    public ProductService(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    public List<Product> findAll() {
        return productRepository.findAll();
    }

    public Optional<Product> findById(Long id) {
        return productRepository.findById(id);
    }

    public Product save(Product product) {
        return productRepository.save(product);
    }

    public void deleteById(Long id) {
        productRepository.deleteById(id);
    }
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/service/OrderService.java
Titre : OrderService.java
Contenu :
package com.exo1.exo1.service;

import com.exo1.exo1.entity.Order;
import com.exo1.exo1.repository.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class OrderService {

    private final OrderRepository orderRepository;

    @Autowired
    public OrderService(OrderRepository orderRepository) {
        this.orderRepository = orderRepository;
    }

    public List<Order> findAll() {
        return orderRepository.findAll();
    }

    public Optional<Order> findById(Long id) {
        return orderRepository.findById(id);
    }

    public Order save(Order order) {
        return orderRepository.save(order);
    }

    public void deleteById(Long id) {
        orderRepository.deleteById(id);
    }
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/controller/ProjetController.java
Titre : ProjetController.java
Contenu :
package com.exo1.exo1.controller;

import com.exo1.exo1.dto.ProjetDTO;
import com.exo1.exo1.entity.Product;
import com.exo1.exo1.mapper.ProjetMapper;
import com.exo1.exo1.service.ProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/projets")
public class ProjetController {

    private final ProductService productService;
    private final ProjetMapper projetMapper;

    @Autowired
    public ProjetController(ProductService productService, ProjetMapper projetMapper) {
        this.productService = productService;
        this.projetMapper = projetMapper;
    }

    @GetMapping
    public List<ProjetDTO> getAllProjets() {
        return productService.findAll()
                .stream()
                .map(projetMapper::productToProjetDTO)
                .collect(Collectors.toList());
    }

    @GetMapping("/{id}")
    public ResponseEntity<ProjetDTO> getProjetById(@PathVariable Long id) {
        return productService.findById(id)
                .map(projetMapper::productToProjetDTO)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<ProjetDTO> createProjet(@RequestBody ProjetDTO projetDTO) {
        Product product = projetMapper.projetDTOToProduct(projetDTO);
        Product createdProduct = productService.save(product);
        ProjetDTO createdProjetDTO = projetMapper.productToProjetDTO(createdProduct);
        return new ResponseEntity<>(createdProjetDTO, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<ProjetDTO> updateProjet(@PathVariable Long id, @RequestBody ProjetDTO projetDTO) {
        if (!productService.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        Product product = projetMapper.projetDTOToProduct(projetDTO);
        product.setId(id);
        Product updatedProduct = productService.save(product);
        ProjetDTO updatedProjetDTO = projetMapper.productToProjetDTO(updatedProduct);
        return ResponseEntity.ok(updatedProjetDTO);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProjet(@PathVariable Long id) {
        if (!productService.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        productService.deleteById(id);
        return ResponseEntity.noContent().build();
    }
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/controller/TacheController.java
Titre : TacheController.java
Contenu :
package com.exo1.exo1.controller;

import com.exo1.exo1.dto.TacheDTO;
import com.exo1.exo1.entity.OrderItem;
import com.exo1.exo1.mapper.TacheMapper;
import com.exo1.exo1.service.OrderItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/taches")
public class TacheController {

    private final OrderItemService orderItemService;
    private final TacheMapper tacheMapper;

    @Autowired
    public TacheController(OrderItemService orderItemService, TacheMapper tacheMapper) {
        this.orderItemService = orderItemService;
        this.tacheMapper = tacheMapper;
    }

    @GetMapping
    public List<TacheDTO> getAllTaches() {
        return orderItemService.findAll()
                .stream()
                .map(tacheMapper::orderItemToTacheDTO)
                .collect(Collectors.toList());
    }

    @GetMapping("/{id}")
    public ResponseEntity<TacheDTO> getTacheById(@PathVariable Long id) {
        return orderItemService.findById(id)
                .map(tacheMapper::orderItemToTacheDTO)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<TacheDTO> createTache(@RequestBody TacheDTO tacheDTO) {
        OrderItem orderItem = tacheMapper.tacheDTOToOrderItem(tacheDTO);
        OrderItem createdOrderItem = orderItemService.save(orderItem);
        TacheDTO createdTacheDTO = tacheMapper.orderItemToTacheDTO(createdOrderItem);
        return new ResponseEntity<>(createdTacheDTO, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<TacheDTO> updateTache(@PathVariable Long id, @RequestBody TacheDTO tacheDTO) {
        if (!orderItemService.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        OrderItem orderItem = tacheMapper.tacheDTOToOrderItem(tacheDTO);
        orderItem.setId(id);
        OrderItem updatedOrderItem = orderItemService.save(orderItem);
        TacheDTO updatedTacheDTO = tacheMapper.orderItemToTacheDTO(updatedOrderItem);
        return ResponseEntity.ok(updatedTacheDTO);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteTache(@PathVariable Long id) {
        if (!orderItemService.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        orderItemService.deleteById(id);
        return ResponseEntity.noContent().build();
    }
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/controller/UserController.java
Titre : UserController.java
Contenu :
package com.exo1.exo1.controller;

import com.exo1.exo1.dto.UserDTO;
import com.exo1.exo1.entity.User;
import com.exo1.exo1.mapper.UserMapper;
import com.exo1.exo1.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/utilisateurs")
public class UserController {

    private final UserService userService;
    private final UserMapper UserMapper;

    @Autowired
    public UserController(UserService userService, UserMapper UserMapper) {
        this.userService = userService;
        this.UserMapper = UserMapper;
    }

    @GetMapping
    public List<UserDTO> getAllUtilisateurs() {
        return userService.findAll()
                .stream()
                .map(UserMapper::userToUserDTO)
                .collect(Collectors.toList());
    }

    @GetMapping("/{id}")
    public ResponseEntity<UserDTO> getUtilisateurById(@PathVariable Long id) {
        return userService.findById(id)
                .map(UserMapper::userToUserDTO)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<UserDTO> createUtilisateur(@RequestBody UserDTO UserDTO) {
        User user = UserMapper.UserDTOToUser(UserDTO);
        User createdUser = userService.save(user);
        UserDTO createdUserDTO = UserMapper.userToUserDTO(createdUser);
        return new ResponseEntity<>(createdUserDTO, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<UserDTO> updateUtilisateur(@PathVariable Long id, @RequestBody UserDTO UserDTO) {
        if (!userService.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        User user = UserMapper.UserDTOToUser(UserDTO);
        user.setId(id);
        User updatedUser = userService.save(user);
        UserDTO updatedUserDTO = UserMapper.userToUserDTO(updatedUser);
        return ResponseEntity.ok(updatedUserDTO);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUtilisateur(@PathVariable Long id) {
        if (!userService.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        userService.deleteById(id);
        return ResponseEntity.noContent().build();
    }
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/dto/UserDTO.java
Titre : UserDTO.java
Contenu :
package com.exo1.exo1.dto;

public class UserDTO {
    private Long id;
    private String nom;
    private String email;

    // Getters et Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNom() {
        return nom;
    }

    public void setNom(String nom) {
        this.nom = nom;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/dto/OrderItemDTO.java
Titre : OrderItemDTO.java
Contenu :
package com.exo1.exo1.dto;

import java.math.BigDecimal;

public class OrderItemDTO {
    private Long id;
    private Long orderId;
    private Long productId;
    private Integer quantity;
    private BigDecimal price;

    // Getters et Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(Long orderId) {
        this.orderId = orderId;
    }

    public Long getProductId() {
        return productId;
    }

    public void setProductId(Long productId) {
        this.productId = productId;
    }

    public Integer getQuantity() {
        return quantity;
    }

    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
    }

    public BigDecimal getPrice() {
        return price;
    }

    public void setPrice(BigDecimal price) {
        this.price = price;
    }
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/dto/ProductDTO.java
Titre : ProductDTO.java
Contenu :
package com.exo1.exo1.dto;

import java.math.BigDecimal;

public class ProductDTO {
    private Long id;
    private String name;
    private BigDecimal price;

    // Getters et Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public BigDecimal getPrice() {
        return price;
    }

    public void setPrice(BigDecimal price) {
        this.price = price;
    }
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/dto/TacheDTO.java
Titre : TacheDTO.java
Contenu :
package com.exo1.exo1.dto;

public class TacheDTO {
    private Long id;
    private String description;
    private boolean complete;

    // Getters et Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public boolean isComplete() {
        return complete;
    }

    public void setComplete(boolean complete) {
        this.complete = complete;
    }
}
----------------------------------
Chemin : src/main/java/com/exo1/exo1/dto/ProjetDTO.java
Titre : ProjetDTO.java
Contenu :
package com.exo1.exo1.dto;

public class ProjetDTO {
    private Long id;
    private String nom;

    // Getters et Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNom() {
        return nom;
    }

    public void setNom(String nom) {
        this.nom = nom;
    }
}
----------------------------------
Chemin : docker-compose.yml
Titre : docker-compose.yml
Contenu :
version: "3.8"
services:
  db:
    image: postgres
    container_name: local_pgdb
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: louis
      POSTGRES_PASSWORD: password
    volumes:
      - local_pgdata:/var/lib/postgresql/data
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: louis.gaillard@codejourney.fr
      PGADMIN_DEFAULT_PASSWORD: password
    volumes:
      - pgadmin-data:/var/lib/pgadmin

volumes:
  local_pgdata:
  pgadmin-data:
----------------------------------
Chemin : pom.xml
Titre : pom.xml
Contenu :
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>
		4.0.0
	</modelVersion>
	<parent>
		<groupId>
			org.springframework.boot
		</groupId>
		<artifactId>
			spring-boot-starter-parent
		</artifactId>
		<version>
			3.2.5
		</version>
		<relativePath />
		<!-- lookup parent from repository -->
	</parent>
	<groupId>
		com.exo1
	</groupId>
	<artifactId>
		exo1
	</artifactId>
	<version>
		0.0.1-SNAPSHOT
	</version>
	<name>
		exo1
	</name>
	<description>
		Exercice numéro 1
	</description>
	<properties>
		<java.version>
			17
		</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>
				org.springframework.boot
			</groupId>
			<artifactId>
				spring-boot-starter-data-jpa
			</artifactId>
		</dependency>
		<dependency>
			<groupId>
				org.springframework.boot
			</groupId>
			<artifactId>
				spring-boot-starter-web
			</artifactId>
		</dependency>
		<dependency>
			<groupId>
				org.postgresql
			</groupId>
			<artifactId>
				postgresql
			</artifactId>
			<scope>
				runtime
			</scope>
		</dependency>
		<dependency>
			<groupId>
				org.projectlombok
			</groupId>
			<artifactId>
				lombok
			</artifactId>
			<optional>
				true
			</optional>
		</dependency>
		<dependency>
			<groupId>
				org.springframework.boot
			</groupId>
			<artifactId>
				spring-boot-starter-test
			</artifactId>
			<scope>
				test
			</scope>
		</dependency>
		<dependency>
			<groupId>
				io.springfox
			</groupId>
			<artifactId>
				springfox-swagger2
			</artifactId>
			<version>
				2.9.2
			</version>
		</dependency>
		<dependency>
			<groupId>
				io.springfox
			</groupId>
			<artifactId>
				springfox-swagger-ui
			</artifactId>
			<version>
				2.9.2
			</version>
		</dependency>
		<dependency>
			<groupId>
				org.springframework.boot
			</groupId>
			<artifactId>
				spring-boot-starter-cache
			</artifactId>
		</dependency>
		<dependency>
			<groupId>
				org.springdoc
			</groupId>
			<artifactId>
				springdoc-openapi-starter-webmvc-ui
			</artifactId>
			<version>
				2.0.3
			</version>
		</dependency>
		<dependency>
			<groupId>
				org.mapstruct
			</groupId>
			<artifactId>
				mapstruct
			</artifactId>
			<version>
				1.5.5.Final
			</version>
		</dependency>
		<dependency>
			<groupId>
				com.github.gavlyukovskiy
			</groupId>
			<artifactId>
				p6spy-spring-boot-starter
			</artifactId>
			<version>
				1.9.1
			</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>
					org.springframework.boot
				</groupId>
				<artifactId>
					spring-boot-maven-plugin
				</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>
								org.projectlombok
							</groupId>
							<artifactId>
								lombok
							</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>
					org.apache.maven.plugins
				</groupId>
				<artifactId>
					maven-compiler-plugin
				</artifactId>
				<configuration>
					<source>
						17
					</source>
					<target>
						17
					</target>
					<annotationProcessorPaths>
						<path>
							<groupId>
								org.mapstruct
							</groupId>
							<artifactId>
								mapstruct-processor
							</artifactId>
							<version>
								1.5.5.Final
							</version>
						</path>
						<!-- other annotation processors -->
						<path>
							<groupId>
								org.projectlombok
							</groupId>
							<artifactId>
								lombok
							</artifactId>
							<version>
								1.18.32
							</version>
						</path>
						<path>
							<groupId>
								org.projectlombok
							</groupId>
							<artifactId>
								lombok-mapstruct-binding
							</artifactId>
							<version>
								0.2.0
							</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
----------------------------------
